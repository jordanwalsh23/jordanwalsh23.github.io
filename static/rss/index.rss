<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>API Evangelism, Technology, and Exploration</title><description>Musings of a hybrid product manager / developer / API evangelist</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>API Evangelism, Technology, and Exploration</title><link>http://localhost:2368/</link></image><generator>Ghost 1.5</generator><lastBuildDate>Tue, 08 Aug 2017 11:53:59 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Saving and Versioning Swagger definitions</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;&lt;strong&gt;TL;DR - Check out &lt;a href="http://swagger-gist.io" target="_blank"&gt;swagger-gist.io&lt;/a&gt; to start saving Swagger definitions as Gists.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;During my time as an API Product Manager, I found myself constantly looking for ways to make my life easier and more efficient.&lt;/p&gt;
&lt;p&gt;One of the problems that I encountered was that it was difficult to&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/saving-and-versioning-swagger-definitions/</link><guid isPermaLink="false">5989a54c5de8868b02338c53</guid><dc:creator>Jordan Walsh</dc:creator><pubDate>Tue, 08 Aug 2017 11:52:49 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;&lt;strong&gt;TL;DR - Check out &lt;a href="http://swagger-gist.io" target="_blank"&gt;swagger-gist.io&lt;/a&gt; to start saving Swagger definitions as Gists.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;During my time as an API Product Manager, I found myself constantly looking for ways to make my life easier and more efficient.&lt;/p&gt;
&lt;p&gt;One of the problems that I encountered was that it was difficult to share and accurately version my swagger definitions.&lt;/p&gt;
&lt;p&gt;I started using &lt;a href="https://swaggerhub.com/" target="_blank"&gt;SwaggerHub&lt;/a&gt;, but I found it to be overkill for the simple Swagger definitions that I was creating.&lt;/p&gt;
&lt;p&gt;Eventually, the easiest way for me was to use Github's gist service frequently to push YAML or JSON files and was asking people to copy these into &lt;a href="http://editor.swagger.io"&gt;editor.swagger.io&lt;/a&gt; to view and manage.&lt;/p&gt;
&lt;p&gt;Given that this relationship was quite nice, I thought I could modify the open source Swagger editor to auto save into Gist for me.  This both allows me to continue to share my Gists, whilst removing the need to manually save them there.&lt;/p&gt;
&lt;p&gt;After a bit of tweaking, and a bunch of AWS services, I've today pushed live &lt;a href="http://swagger-gist.io" target="_blank"&gt;swagger-gist.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="getstarted"&gt;Get Started:&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;You'll need a github account, so sign up at github.com.&lt;/li&gt;
	&lt;li&gt;Follow the instructions &lt;a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank"&gt;here&lt;/a&gt; to generate an access token. Please make sure you grant &lt;strong&gt;Gist&lt;/strong&gt; access when creating the token.&lt;/li&gt;
	&lt;li&gt;Browse to &lt;a href="http://swagger-gist.io" target="_blank"&gt;swagger-gist.io&lt;/a&gt; and click 'File -&gt; Connect to Github'&lt;/li&gt;
	&lt;li&gt;Enter your github username and the access token that you generated.&lt;/li&gt;
	&lt;li&gt;Click 'File -&gt; Open API Definition' and this will search your Gists for any that have a 'Description' with the word 'Swagger' in it.&lt;/li&gt;
	&lt;li&gt;Click 'Open' and the app will retrieve the JSON gist and render it as YAML.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: I suggest saving this access token in your favourite password safe as you may need it across multiple devices.  At this stage I only save it into the browser's localstorage object.&lt;/p&gt;
&lt;h2 id="creatinganewswaggerdefinition"&gt;Creating a new Swagger Definition&lt;/h2&gt;
&lt;p&gt;If you don't have any Swagger as Gist yet, then you'll need to create a one using the instructions below.&lt;/p&gt;
&lt;p&gt;For the moment you have to create new definitions manually, but once it's created, the auto-saving will take place. I'll improve this eventually.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Browse to &lt;a href="https://gist.github.com/" target="_blank"&gt;gist.github.com&lt;/a&gt; and sign in.&lt;/li&gt;
	&lt;li&gt;In the gist description, make sure you include the word 'Swagger' (with the capital S) and make a note of it.&lt;/li&gt;
	&lt;li&gt;The filename can be whatever you desire, just make a note of it.&lt;/li&gt;
	&lt;li&gt;Enter some sample value in the gist (e.g. ABC123) it doesn't matter what it is.&lt;/li&gt;
	&lt;li&gt;Click Create Public Gist.&lt;/li&gt;
	&lt;li&gt;In the URL you will now see something like: https://gist.github.com/johnsmith123/&lt;strong&gt;40eea519f479fe27a831d15770255a7f&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;The string of characters after your username is the Gist-ID.  You'll need this next.&lt;/li&gt;
&lt;/ol&gt;
Creating the new file in Swagger-Gist:
&lt;ol&gt;
	&lt;li&gt;Click 'File -&gt; New'&lt;/li&gt;
	&lt;li&gt;You'll see in the sample file 'info' section, there are 4 elements that should be filled out:
    - title
    - x-gist-id
    - x-gist-filename
    - x-gist-description&lt;/li&gt;
	&lt;li&gt;The title can be whatever you desire, but the id, filename, and description should match exactly what you created in your sample Gist.&lt;/li&gt;
	&lt;li&gt;Once you've copied the properties, the auto-save will automatically occur after 10s.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it! You've now got a swagger definition that is hooked up to Gist.&lt;/p&gt;
&lt;h2 id="nextsteps"&gt;Next Steps:&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;Hook up proper Github OAuth to generate the token and store them in a more permanent store.&lt;/li&gt;
	&lt;li&gt;Allow generation of new Swagger docs directly from the editor&lt;/li&gt;
	&lt;li&gt;Publish to Heroku (I use Heroku heavily for hosting swagger definitions).&lt;/li&gt;
	&lt;li&gt;Migrate code to the latest fork of swagger editor.  It's changed significantly since I started this project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Tech Tools Used:&lt;/h3&gt;
Front End: Angular JS
Hosting: AWS S3 / CloudFront
&lt;p&gt;Back End: AWS API Gateway -&amp;gt; Lambda -&amp;gt; Gist API.&lt;/p&gt;
&lt;p&gt;Shout out to @gojkoadzic who created &lt;a href="https://claudiajs.com/" target="_blank"&gt;claudiajs&lt;/a&gt; which helped me significantly with writing my AWS API / Lambda code.&lt;/p&gt;
&lt;p&gt;If you're interested in finding out more, ping me or comment and I'll write another post.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="http://jordwalsh.com"&gt;jordwalsh.com&lt;/a&gt; on 10 October 2016.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Remember.. APIs are an abstraction</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Have you ever noticed how the best APIs on the market seem to provide a simple elegant and clean interface to the data? Developers and API designers take note - this does not happen by accident.&lt;/p&gt;
&lt;p&gt;This simple design principle was something that I didn't really pay much attention to&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/remember-apis-are-an-abstraction/</link><guid isPermaLink="false">5989a4a85de8868b02338c52</guid><dc:creator>Jordan Walsh</dc:creator><pubDate>Tue, 08 Aug 2017 11:48:59 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Have you ever noticed how the best APIs on the market seem to provide a simple elegant and clean interface to the data? Developers and API designers take note - this does not happen by accident.&lt;/p&gt;
&lt;p&gt;This simple design principle was something that I didn't really pay much attention to when i was first building out our API, however I've become much more aware of it recently, and it is now almost impossible to change;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;APIs are an abstraction of the data; not the representation of it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The easiest approach to developing an API is to simply take either the Database representation of a resource (e.g. the row), or it's associated application file (e.g. Java class) and run some sort of JSON converter over it.&lt;/p&gt;
&lt;p&gt;This will give you a lovely output in JSON of the data. Expose this via a URL and job done, you've got an API.. right? ...&lt;strong&gt;Wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This pattern has two very large flaws;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Exposure of unnecessary fields&lt;/li&gt;
	&lt;li&gt;Tightly coupling your API to your Back End&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="exposureofunnecessaryfields"&gt;Exposure of Unnecessary Fields&lt;/h2&gt;
&lt;p&gt;By simply exposing your internal resource representation as an API, you are potentially asking the API user fields they both don't need, and don't care about.&lt;/p&gt;
&lt;p&gt;Take the following example, suppose this is a row in a database table:&lt;/p&gt;
&lt;table border="1" width="100%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;email&lt;/th&gt;
&lt;th&gt;billingreference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;12345&lt;/td&gt;
&lt;td&gt;Johnny Smith&lt;/td&gt;
&lt;td&gt;johnny.smith@myapi.com&lt;/td&gt;
&lt;td&gt;c_28f898joc90&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
Now this seems like a completely appropriate database table, so let's expose this as an API:
&lt;pre&gt;&lt;code&gt;GET http://myapi.com/customers/12345
Accept: application/json
{
   &amp;quot;id&amp;quot; : &amp;quot;12345&amp;quot;,
   &amp;quot;name&amp;quot; : &amp;quot;Johnny Smith&amp;quot;,
   &amp;quot;email&amp;quot; : &amp;quot;johnny.smith@myapi.com&amp;quot;,
   &amp;quot;billingreference&amp;quot; : &amp;quot;c_28f898joc90&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks good. Easy to consume, and matches the database perfectly. The only issue now is that you've exposed your billingreference data likely used for an internal system via your publicly accessible API.&lt;/p&gt;
&lt;p&gt;This means that the user now has to inspect and make note of this data, (which they shouldn't really be seeing in the first place) and worse they potentially may store it 'just incase' they may need it in the future.&lt;/p&gt;
&lt;p&gt;The second issue with this approach is that you've also tightly coupled your representation in the Database with your API representation.&lt;/p&gt;
&lt;h2 id="tightlycoupledapiwithyourbackend"&gt;Tightly Coupled API with your Back End&lt;/h2&gt;
&lt;p&gt;Tightly coupling is a major flaw in API development, and I have seen it happen numerous times.  By tightly coupling this information, you remove the ability to change your Back End system without having to also change your API.&lt;/p&gt;
&lt;p&gt;APIs should be completely abstracted from the back end system, allowing users to consume the representation that you want them to receive, while being completely independent from where the data is stored.&lt;/p&gt;
&lt;p&gt;If one day you wanted to remove the billingreference column above, and put it in another table, you now have to modify your API to continue providing this field, or version the API to deprecate it.&lt;/p&gt;
&lt;p&gt;If it was never provided in the first place, you've saved yourself a rather large headache.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Provide only the fields that are useful, and nothing else&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When designing your API resources, make sure you follow this mantra.  It will ensure that you have simple, clean and useful API representations that your users will love, and it will allow your developers to change their back end systems independent of the API representation.&lt;/p&gt;
&lt;p&gt;This method also allows you to use tools like &lt;a href="http://apiary.io"&gt;apiary.io&lt;/a&gt; and apiblueprint to design your API well before any actual coding begins, which is a major plus when trying to understand what your users actually want.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href="http://jordwalsh.com"&gt;jordwalsh.com&lt;/a&gt; on 28 March 2015.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>API Management Platforms - do I need one?</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;One thing every enterprise API creator needs to think about at some point prior to the API going to production is whether an API Management Platform is required.&lt;/p&gt;
&lt;p&gt;The main ones that I looked at when we were in the design phase of our API were:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Mashery (&lt;a title="Mashery" href="http://www.mashery.com/" target="_blank"&gt;http://www.mashery.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://localhost:2368/api-management-platforms-do-i-need-one/</link><guid isPermaLink="false">5989a3915de8868b02338c51</guid><dc:creator>Jordan Walsh</dc:creator><pubDate>Tue, 08 Aug 2017 11:46:22 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;One thing every enterprise API creator needs to think about at some point prior to the API going to production is whether an API Management Platform is required.&lt;/p&gt;
&lt;p&gt;The main ones that I looked at when we were in the design phase of our API were:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Mashery (&lt;a title="Mashery" href="http://www.mashery.com/" target="_blank"&gt;http://www.mashery.com/&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Apigee (&lt;a title="Apigee" href="https://apigee.com/" target="_blank"&gt;https://apigee.com/&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;3 Scale (&lt;a title="3Scale" href="http://www.3scale.net/" target="_blank"&gt;http://www.3scale.net/&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Layer 7 (&lt;a title="Layer 7" href="http://www.layer7tech.com/" target="_blank"&gt;http://www.layer7tech.com/&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are lots of others out there, but these four seem be the most active contributors to the API Management community.&lt;/p&gt;
&lt;h2 id="whatexactlyisanapimanagementplatform"&gt;What exactly is an API Management Platform?&lt;/h2&gt;
&lt;p&gt;All of these platforms all fundamentally do the same thing, but each have their nuances and provide different features and functions.&lt;/p&gt;
&lt;p&gt;Generally they act as a proxy between your API and the customer, consuming application, or partner.&lt;/p&gt;
&lt;p&gt;&lt;img class="" src="http://www.3scale.net/wp-content/uploads/2014/06/3scale-api-management-diagram.jpg" alt="" width="1078" height="616"&gt; &lt;a href="http://www.3scale.net/api-management/"&gt;http://www.3scale.net/api-management/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These platforms protect your back end services by limiting the customer to a certain number of allowed queries per second (QPS) or queries per day (QPD).&lt;/p&gt;
&lt;p&gt;This prevents a user from inadvertently performing a DoS through poor coding or some form of attack.  If they can only get through a small number of QPS, they'll bring down the API Management Platform before they'll bring down your service.&lt;/p&gt;
&lt;p&gt;Along with this, they also generally provide:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;API Key &amp; Authorisation Management&lt;/li&gt;
	&lt;li&gt;Usage Reporting and Analytics&lt;/li&gt;
	&lt;li&gt;Live documentation (Swagger/io-docs)&lt;/li&gt;
	&lt;li&gt;Developer Community Management&lt;/li&gt;
	&lt;li&gt;Billing and Payment Management&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="whynotjustbuilditmyselfusingmod_qos"&gt;Why not just build it myself using mod_qos?&lt;/h2&gt;
&lt;p&gt;Our network administrator was adamant (and still is) that he could build all of this for me with without the need to pay an external vendor.&lt;/p&gt;
&lt;p&gt;Projects like &lt;a title="mod_qos" href="http://opensource.adnovum.ch/mod_qos/" target="_blank"&gt;Apache's mod_qos&lt;/a&gt; provide an excellent solution for throughput management, this bundled with an analytics engine (&lt;a title="Free log file analysis" href="http://www.awstats.org/" target="_blank"&gt;awstats&lt;/a&gt;) and you've got half the service done right?&lt;/p&gt;
&lt;p&gt;Wrong. Do you really feel like designing all of the features and functions specifying exactly what you need.  How long is that going to take with all of the other stuff your network guy (or girl) has to work on? What about ongoing support, maintenance, new features... don't you have an API programme to be worrying about?&lt;/p&gt;
&lt;p&gt;The beauty of these SaaS/PaaS providers is that they've done the thinking for you, and they are generally experts in the area, so they know what you want before you do!&lt;/p&gt;
&lt;p&gt;They also generally have great Partner and API Growth programmes, so if you can get your API on their marketing ticket, then you're kickstarting your growth before you've even lifted a finger.&lt;/p&gt;
&lt;p&gt;We had web demo's from both Mashery and Apigee, and in the end we ran with &lt;strong&gt;Mashery&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Implementing an API Management Platform&lt;/h3&gt;
The main reasons we chose Mashery was that it seemed very simple and easy to use, their price point was right for us, they had all of the features out of the box that we were looking to implement, and they could stand up an environment for us quickly.
&lt;p&gt;They've got some really smart people and they will give you some valuable insights into usage patterns, similar use cases and implementation best practices.&lt;/p&gt;
&lt;p&gt;When implementing an API management platform, you'll also need to think about:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The UI of your developer portal; they can help you with implementation, but the design is up to you&lt;/li&gt;
	&lt;li&gt;Sandboxing/Trial access for your developers and the associated registration flow&lt;/li&gt;
	&lt;li&gt;Documentation of your API; are you just going to use swagger/io-docs or are you going to manually write the documentation.&lt;/li&gt;
	&lt;li&gt;Network level access; whitelisting/blacklisting and firewalls.&lt;/li&gt;
&lt;/ol&gt;
&lt;strong&gt;Downsides/Pitfalls of using an API Management Platform&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;Change Requests, customisations can be difficult to get approved, and can be costly&lt;/li&gt;
	&lt;li&gt;VSMT isn't really supported, so stick to generic content types&lt;/li&gt;
	&lt;li&gt;It can be harder to debug issues (timeouts, network access, authentication)&lt;/li&gt;
	&lt;li&gt;Their downtime (if any) may reflect poorly on your API&lt;/li&gt;
&lt;/ul&gt;
In the end, it really does come down to what will work in your organisation.  In my opinion, I believe there is value in using an API management platform.
&lt;p&gt;Their whole purpose is to assist your company in building out your APIs, so it's in their best interests to help you grow.&lt;/p&gt;
&lt;p&gt;It will assist you with;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Speed to market&lt;/li&gt;
	&lt;li&gt;Accordance with best practices&lt;/li&gt;
	&lt;li&gt;Out of the box reporting, key management and developer portal/CMS&lt;/li&gt;
	&lt;li&gt;Network opportunities with other organisations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, this may come at an up-front cost, and a bit more effort to get things going.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="http://jordwalsh.com"&gt;jordwalsh.com&lt;/a&gt; on 7 February 2015 and cross posted by Mashery (&lt;a href="https://www.mashery.com/blog/api-management-platforms-do-i-need-one"&gt;https://www.mashery.com/blog/api-management-platforms-do-i-need-one&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>How do users want to see you securing your API?</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Where I work, where we supply a software platform that is providing a service to users.&lt;/p&gt;
&lt;p&gt;Like thousands of others of these services, people can log into our web interface using their &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; and can perform some actions within the tool (wordpress is a good example of such&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/how-do-users-want-to-see-you-securing-your-api/</link><guid isPermaLink="false">5989a2af5de8868b02338c50</guid><dc:creator>Jordan Walsh</dc:creator><pubDate>Tue, 08 Aug 2017 11:41:32 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Where I work, where we supply a software platform that is providing a service to users.&lt;/p&gt;
&lt;p&gt;Like thousands of others of these services, people can log into our web interface using their &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; and can perform some actions within the tool (wordpress is a good example of such a system).&lt;/p&gt;
&lt;p&gt;When this type of service is transitioned into an API, we generally are no longer dealing with &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;passwords&lt;/strong&gt;, we are now dealing with API keys, signatures, &lt;a href="http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/" title="HMAC"&gt;HMAC&lt;/a&gt;, and a whole raft of other jargon to do essentially the same thing.&lt;/p&gt;
&lt;p&gt;When I was thinking about how I was going to set up Authorisation to our API, I thought about the types of API users who would be using the service.&lt;/p&gt;
&lt;p&gt;I could identify two kinds of people building applications that use my API:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. The Service Provider&lt;/strong&gt;&lt;br&gt;
This is the person that is building a new application, and wants to utilise the functionality provided by the API.  They are going to have their own users database, and they'll authenticate to the API using their own credentials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. The Service Extender&lt;/strong&gt; This is the person that is building an application that extends the functionality of the existing service using the API.&lt;/p&gt;
&lt;p&gt;They may or may not have their own users database, but the likelihood is that they'll allow their users to authenticate to the API using their own credentials within the service (e.g. OAuth).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As I follow the &lt;a href="http://en.wikipedia.org/wiki/You_aren't_gonna_need_it"&gt;YAGNI&lt;/a&gt; principle as much as possible, the only users that I had in the first instance fit into the first category.&lt;/p&gt;
&lt;p&gt;Based on this, there wasn't much point in supporting an OAuth style framework until we had some users that were jumping up and down for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keep the authorisation simple and your users will thank you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP already has support built-in for authorising users, so I deemed the easiest way was to use the out of the box Authorization header. Take the existing username and password to access the service that users already know, turn it into Base64 and use Basic HTTP to access the API. So a username and password of _john.smith / Password123 _becomes:&lt;/p&gt;
&lt;pre&gt;&lt;span style="font-family:Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;"&gt;&lt;span style="line-height:normal;"&gt;HTTPS 1.1 GET /messages
Authorization: Basic am9obi5zbWl0aDpQYXNzd29yZDEyMw==&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Every programming language comes with a &lt;strong&gt;Base64&lt;/strong&gt; encoder built-in, so it's simple for the users to set up. There are no timestamps, signatures, HMAC or any of the other cumbersome approaches.&lt;/p&gt;
&lt;p&gt;However, there is one caveat; you must use &lt;strong&gt;HTTPS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As long as you force HTTPS, this is method secure.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Without HTTPS however, this mechanism is clearly open to &lt;a href="http://netsecurity.about.com/cs/hackertools/a/aa121403.htm"&gt;packet sniffing&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;man-in-the-middle&lt;/a&gt; attacks.&lt;/p&gt;
&lt;p&gt;I have no doubt the day will come where we need to build this out to support services like OAuth or perhaps generation of signatures using timestamps and shared secrets, but in 3 years of running this service, we haven't had any complaints from users about this methodology.&lt;/p&gt;
&lt;p&gt;Perhaps when you are thinking of authorising your API, check with your users about this methodology before jumping straight to OAuth or similar.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="http://jordwalsh.com"&gt;jordwalsh.com&lt;/a&gt; - 14 September 2014&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Designing the API – Identifying the resource types</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Before I jump directly into my version of &amp;quot;Donny Do&amp;quot; and &amp;quot;Donny Don't&amp;quot; for APIs, I'll give a bit of background as to the steps I took to develop our API.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(**Note: **If you get REST and how to structure a REST API, skip this post)&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/designing-the-api-identifying-the-resource-types/</link><guid isPermaLink="false">598942d64879a07cf5954d7d</guid><dc:creator>Jordan Walsh</dc:creator><pubDate>Tue, 08 Aug 2017 11:37:45 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Before I jump directly into my version of &amp;quot;Donny Do&amp;quot; and &amp;quot;Donny Don't&amp;quot; for APIs, I'll give a bit of background as to the steps I took to develop our API.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(**Note: **If you get REST and how to structure a REST API, skip this post)...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I was asked to design our API my first step was to watch &lt;a href="https://blog.apigee.com/detail/restful_api_design" title="Teach a dog to REST"&gt;Teach a Dog to REST&lt;/a&gt;. Then watch it again, and again. I made other members of the team watch it, and took as much as I could from it.&lt;/p&gt;
&lt;p&gt;This video is probably the most elegant demonstration I've seen that articulates &amp;quot;proper&amp;quot; REST API design.&lt;/p&gt;
&lt;p&gt;From here I took my instructions from the video and broke down the application into its different types of resources.&lt;/p&gt;
&lt;p&gt;As the application I was dealing with was to do with SMS messaging, the resources became things like &lt;strong&gt;messages&lt;/strong&gt;, &lt;strong&gt;message templates, recipients&lt;/strong&gt;, and &lt;strong&gt;recipient groups&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I didn't start with the use cases, e.g. &amp;quot;how do I send a message&amp;quot; because identifying the resources and the resource types within the API is far more important at this stage than worrying about what you can do with the API.&lt;/p&gt;
&lt;p&gt;The reason is that if you focus on the use cases (the verbs) you'll end up with a list of actions. This may sound OK, but ultimately this path will lead to a bunch of action based URLs e.g. /sendMessage, /createRecipient or (worse) /addRecipientToDistributionList.&lt;/p&gt;
&lt;p&gt;Focus on the resources (the nouns) instead. What you actually want at this stage is simply the list of resource group URLs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/messages&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/templates&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/recipients&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/recipientgroups&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here I simply thought of each of the main 4 HTTP verbs acting on my URLs; POST, GET, PUT and DELETE (Create, Read, Update and Delete respectively).&lt;/p&gt;
&lt;table width="100%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;POST&lt;/th&gt;
&lt;th&gt;PUT&lt;/th&gt;
&lt;th&gt;DELETE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;messages&lt;/td&gt;
&lt;td&gt;Retrieve a listing of messages.&lt;/td&gt;
&lt;td&gt;Create and send a new message&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Not Implemented (could refer to deleting all messages)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;message templates&lt;/td&gt;
&lt;td&gt;Retrieve a listing of message templates&lt;/td&gt;
&lt;td&gt;Create a new message template&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Not Implemented (could refer to deleting all templates)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recipients&lt;/td&gt;
&lt;td&gt;Retrieve a listing of recipients.&lt;/td&gt;
&lt;td&gt;Create a new recipient&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Not Implemented (could refer to deleting all recipients)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recipient groups&lt;/td&gt;
&lt;td&gt;Retrieve a listing of recipient groups.&lt;/td&gt;
&lt;td&gt;Create a new recipient group&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Not Implemented (could refer to deleting all groups)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we still haven't gotten into any schemas or technical implementation details.  During this phase I am trying to define a simple API structure; that's it. After completing the table for the resource groupings, I then moved on to each individual resource.&lt;/p&gt;
&lt;table width="100%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;POST&lt;/th&gt;
&lt;th&gt;PUT&lt;/th&gt;
&lt;th&gt;DELETE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;messages/[ID]&lt;/td&gt;
&lt;td&gt;Retrieve an individual message&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Update an individual message (possibly relevant for drafting)&lt;/td&gt;
&lt;td&gt;Delete an individual message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;messagetemplates/[ID]&lt;/td&gt;
&lt;td&gt;Retrieve a message template&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Update an individual message template&lt;/td&gt;
&lt;td&gt;Delete an individual message template&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recipients/[ID]&lt;/td&gt;
&lt;td&gt;Retrieve a recipient record&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Update an individual recipient record&lt;/td&gt;
&lt;td&gt;Delete an individual recipient record&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recipientgroups/[ID]&lt;/td&gt;
&lt;td&gt;Retrieve a recipient group&lt;/td&gt;
&lt;td&gt;Not Implemented&lt;/td&gt;
&lt;td&gt;Update a recipient group's details, or add a recipient to the group.&lt;/td&gt;
&lt;td&gt;Delete a recipient group&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Structuring my table like this forced me to think about what each action is going to perform as I only had 4 actions to work with (there are a few others but we'll get to them later).&lt;/p&gt;
&lt;p&gt;For example, I made the call that when you performed a POST to /messages this would not only &lt;strong&gt;Create&lt;/strong&gt; the Message, it would also &lt;strong&gt;Send&lt;/strong&gt; it.&lt;/p&gt;
&lt;p&gt;Some would argue that the resource should have been created in one step, and sent in another e.g. create it with a POST to /messages, then update it with a PUT to move it to a 'sent' state.&lt;/p&gt;
&lt;p&gt;This was an option I considered, but I decided that more of my users would be sending messages in one single step than there were those that would require a draft/send process, so I went with the two in one approach.&lt;/p&gt;
&lt;p&gt;When you are designing your API, I would encourage you to start here also.  It will take some time to map out what each resource is, and what the 4 verbs mean for each, but it will be worthwhile in the long run.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="http://jordwalsh.com"&gt;jordwalsh.com&lt;/a&gt; - 24 April 2014&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Building an API - Lessons Learned</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;In 2011 my boss came to me and asked me to design an API for our product.&lt;/p&gt;
&lt;p&gt;My response. &lt;em&gt;API? Sure! What’s that?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Although I had been exposed to APIs in the past in my role as a developer, I had never thought about the API design from a&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/building-an-api-lessons-learned/</link><guid isPermaLink="false">598941734879a07cf5954d7c</guid><dc:creator>Jordan Walsh</dc:creator><pubDate>Tue, 08 Aug 2017 04:46:34 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;In 2011 my boss came to me and asked me to design an API for our product.&lt;/p&gt;
&lt;p&gt;My response. &lt;em&gt;API? Sure! What’s that?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Although I had been exposed to APIs in the past in my role as a developer, I had never thought about the API design from a supplier perspective, only ever a user. I now had to think about this from a whole new angle.&lt;/p&gt;
&lt;p&gt;Where to start…?&lt;/p&gt;
&lt;p&gt;After doing a bit of research, I presented my team with a macro design about how the API would work. It was going to follow this amazing standard for APIs called ‘REST’.&lt;/p&gt;
&lt;p&gt;The following links were invaluable during the concept and design phases of the API:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.getpostman.com/"&gt;Postman&lt;/a&gt;&lt;br&gt;
A powerful GUI platform to make your API development faster &amp;amp; easier, from building API requests through testing, documentation and sharing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.runscope.com/"&gt;Runscope&lt;/a&gt;&lt;br&gt;
Proxy the requests from your app to your API with Runscope. Verify that your APIs are returning the correct data. This tool deserves an entire blog post on it’s own. Just sign up and use it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn"&gt;Best Practices for designing REST APIs&lt;br&gt;
&lt;/a&gt;An excellent article around the reasons why REST APIs are designed the way they are. Brilliant stuff.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.apigee.com/detail/restful_api_design/"&gt;RESTful API Design: Teach a Dog to REST&lt;/a&gt;&lt;br&gt;
A great presentation on the best practices and principles of restful architecture and design. A must for anyone getting introduced REST APIs.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.restapitutorial.com/"&gt;REST API Tutorial&lt;/a&gt;&lt;br&gt;
A step-by-step tutorial on what REST is and why it is good&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jacobian.org/writing/rest-worst-practices/"&gt;REST Anti-patterns&lt;/a&gt;&lt;br&gt;
A good article about the do not’s of REST&lt;/p&gt;
&lt;p&gt;The API that I designed has now been in production for over 6 years and I’m writing (re-publishing) this post because if I was doing this all over again, there’s a few things that I would have liked to have known, namely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;REST — Best Practice vs Practicality&lt;/li&gt;
&lt;li&gt;Versioning your APIs&lt;/li&gt;
&lt;li&gt;Securing your APIs&lt;/li&gt;
&lt;li&gt;API Service / Gateway Providers&lt;/li&gt;
&lt;li&gt;API Deployment and Update methodologies&lt;/li&gt;
&lt;li&gt;Developer Community &amp;amp; Examples&lt;/li&gt;
&lt;li&gt;Carding for Developers (Agile Story Cards)&lt;/li&gt;
&lt;li&gt;Documentation (OpenAPI Spec)&lt;/li&gt;
&lt;li&gt;User feedback!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Over the next few months I’m going to be pushing content related to each of these areas, so stay tuned!&lt;/p&gt;
&lt;p&gt;Please feel free to drop me a line if you’re curious about any other aspects of the API design and any decisions that I made along the way.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="http://jordwalsh.com"&gt;jordwalsh.com&lt;/a&gt; on April 26, 2014.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>